"""create trigger to update user position from event

Revision ID: d9daf41cdec5
Revises: c49d4ee35b08
Create Date: 2025-08-23 04:03:37.877156

"""
import sqlmodel
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd9daf41cdec5'
down_revision: Union[str, None] = 'c49d4ee35b08'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Define the function and trigger SQL as constants
TRIGGER_FUNCTION_SQL = """
CREATE OR REPLACE FUNCTION update_partner_user_position_from_event()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO partner_user_position (
        id, wallet_address, protocol_slug, protocol_type, quantity_type, token_address,
        quantity, created_at, updated_at
    )
    VALUES (
        gen_random_uuid(), NEW.wallet_address, NEW.protocol_slug, NEW.protocol_type,
        NEW.quantity_type, NEW.token_address, NEW.quantity_change, NOW(), NOW()
    )
    ON CONFLICT (wallet_address, protocol_slug, quantity_type, token_address)
    DO UPDATE SET
        quantity = partner_user_position.quantity + NEW.quantity_change,
        updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
"""

CREATE_TRIGGER_SQL = """
CREATE TRIGGER trg_update_user_position_on_event_insert
AFTER INSERT ON partner_protocol_event
FOR EACH ROW
EXECUTE FUNCTION update_partner_user_position_from_event();
"""

DROP_TRIGGER_SQL = "DROP TRIGGER IF EXISTS trg_update_user_position_on_event_insert ON partner_protocol_event;"
DROP_FUNCTION_SQL = "DROP FUNCTION IF EXISTS update_partner_user_position_from_event();"


def upgrade() -> None:
    """Create the trigger function and the trigger itself."""
    # Also ensure the necessary extension is enabled.
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    op.execute(TRIGGER_FUNCTION_SQL)
    op.execute(CREATE_TRIGGER_SQL)


def downgrade() -> None:
    """Remove the trigger and the trigger function."""
    op.execute(DROP_TRIGGER_SQL)
    op.execute(DROP_FUNCTION_SQL)