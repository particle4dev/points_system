"""Create PointsUserPointHistory trigger

Revision ID: 8e572260fec0
Revises: 3638a3631287
Create Date: 2025-08-21 10:53:24.190923

"""
import sqlmodel
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8e572260fec0'
down_revision: Union[str, None] = '3638a3631287'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None



# --- Define Trigger and Function Names ---
TRIGGER_FUNC_NAME = "log_points_history"
TRIGGER_NAME = "trigger_log_points_history"
SOURCE_TABLE = "points_user_campaign_points"
TARGET_TABLE = "points_user_point_history"

# --- SQL for the Trigger Function ---
# This function logs the point delta to the history table.
TRIGGER_FUNCTION_SQL = f"""
CREATE OR REPLACE FUNCTION {TRIGGER_FUNC_NAME}()
RETURNS TRIGGER AS $$
DECLARE
    v_points_delta NUMERIC;
    v_source_id UUID;
    v_wallet_address VARCHAR;
    v_campaign_id UUID;
    v_point_type_slug VARCHAR;
BEGIN
    -- Determine the delta and affected entities based on the operation
    IF (TG_OP = 'INSERT') THEN
        v_points_delta := NEW.points_earned;
        v_source_id := NEW.id;
        v_wallet_address := NEW.wallet_address;
        v_campaign_id := NEW.campaign_id;
        v_point_type_slug := NEW.point_type_slug;

    ELSIF (TG_OP = 'UPDATE') THEN
        -- Calculate the difference between the new and old points
        v_points_delta := NEW.points_earned - OLD.points_earned;
        v_source_id := NEW.id;
        v_wallet_address := NEW.wallet_address;
        v_campaign_id := NEW.campaign_id;
        v_point_type_slug := NEW.point_type_slug;

    ELSIF (TG_OP = 'DELETE') THEN
        -- Log the removal of points as a negative delta
        v_points_delta := -OLD.points_earned;
        v_source_id := OLD.id;
        v_wallet_address := OLD.wallet_address;
        v_campaign_id := OLD.campaign_id;
        v_point_type_slug := OLD.point_type_slug;
    END IF;

    -- Insert a new, immutable record into the history table if delta is not zero
    IF v_points_delta != 0 THEN
        INSERT INTO {TARGET_TABLE} (source_event_id, wallet_address, campaign_id, point_type_slug, points_change)
        VALUES (v_source_id, v_wallet_address, v_campaign_id, v_point_type_slug, v_points_delta);
    END IF;

    RETURN NULL; -- The result is ignored for an AFTER trigger
END;
$$ LANGUAGE plpgsql;
"""

# --- SQL to Attach the Trigger to the Table ---
CREATE_TRIGGER_SQL = f"""
CREATE TRIGGER {TRIGGER_NAME}
AFTER INSERT OR UPDATE OR DELETE ON {SOURCE_TABLE}
FOR EACH ROW EXECUTE FUNCTION {TRIGGER_FUNC_NAME}();
"""

# --- SQL to Remove the Trigger and Function ---
DROP_TRIGGER_SQL = f"DROP TRIGGER IF EXISTS {TRIGGER_NAME} ON {SOURCE_TABLE};"
DROP_FUNCTION_SQL = f"DROP FUNCTION IF EXISTS {TRIGGER_FUNC_NAME}();"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Manually add the trigger function and the trigger itself
    op.execute(TRIGGER_FUNCTION_SQL)
    op.execute(CREATE_TRIGGER_SQL)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Manually remove the trigger and the function first
    op.execute(DROP_TRIGGER_SQL)
    op.execute(DROP_FUNCTION_SQL)
    # ### end Alembic commands ###