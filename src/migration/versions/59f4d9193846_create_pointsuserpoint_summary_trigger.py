"""Create PointsUserPoint summary trigger

Revision ID: 59f4d9193846
Revises: 71efecc1be69
Create Date: 2025-08-21 10:49:58.148023

"""
import sqlmodel
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '59f4d9193846'
down_revision: Union[str, None] = '71efecc1be69'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# --- Define Trigger and Function Names ---
TRIGGER_FUNC_NAME = "update_user_point_summary"
TRIGGER_NAME = "trigger_update_user_point_summary"
SOURCE_TABLE = "points_user_campaign_points"
TARGET_TABLE = "points_user_point"

# --- SQL for the Trigger Function ---
# This PL/pgSQL function recalculates and updates the summary table.
TRIGGER_FUNCTION_SQL = f"""
CREATE OR REPLACE FUNCTION {TRIGGER_FUNC_NAME}()
RETURNS TRIGGER AS $$
DECLARE
    v_wallet_address VARCHAR;
    v_point_type_slug VARCHAR;
BEGIN
    -- Determine which wallet and point type to update
    IF (TG_OP = 'DELETE') THEN
        v_wallet_address := OLD.wallet_address;
        v_point_type_slug := OLD.point_type_slug;
    ELSE
        v_wallet_address := NEW.wallet_address;
        v_point_type_slug := NEW.point_type_slug;
    END IF;

    -- Create the summary row if it doesn't exist
    INSERT INTO {TARGET_TABLE} (wallet_address, point_type_slug, points)
    VALUES (v_wallet_address, v_point_type_slug, 0)
    ON CONFLICT (wallet_address, point_type_slug) DO NOTHING;

    -- Update the summary table with the new total
    UPDATE {TARGET_TABLE}
    SET points = (
        SELECT COALESCE(SUM(points_earned), 0)
        FROM {SOURCE_TABLE}
        WHERE wallet_address = v_wallet_address
          AND point_type_slug = v_point_type_slug
    )
    WHERE wallet_address = v_wallet_address
      AND point_type_slug = v_point_type_slug;

    RETURN NULL; -- The result is ignored since this is an AFTER trigger
END;
$$ LANGUAGE plpgsql;
"""

# --- SQL to Attach the Trigger to the Table ---
CREATE_TRIGGER_SQL = f"""
CREATE TRIGGER {TRIGGER_NAME}
AFTER INSERT OR UPDATE OR DELETE ON {SOURCE_TABLE}
FOR EACH ROW EXECUTE FUNCTION {TRIGGER_FUNC_NAME}();
"""

# --- SQL to Remove the Trigger and Function ---
DROP_TRIGGER_SQL = f"DROP TRIGGER IF EXISTS {TRIGGER_NAME} ON {SOURCE_TABLE};"
DROP_FUNCTION_SQL = f"DROP FUNCTION IF EXISTS {TRIGGER_FUNC_NAME}();"

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Manually add the trigger function and the trigger itself
    op.execute(TRIGGER_FUNCTION_SQL)
    op.execute(CREATE_TRIGGER_SQL)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Manually remove the trigger and the function before dropping the table
    op.execute(DROP_TRIGGER_SQL)
    op.execute(DROP_FUNCTION_SQL)
    # ### end Alembic commands ###