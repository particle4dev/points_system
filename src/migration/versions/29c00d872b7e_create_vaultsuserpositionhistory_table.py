"""Create VaultsUserPositionHistory table

Revision ID: 29c00d872b7e
Revises: 601e5de98a25
Create Date: 2025-08-25 17:34:37.312111

"""
import sqlmodel
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '29c00d872b7e'
down_revision: Union[str, None] = '601e5de98a25'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# --- SOLUTION STEP 1: Define the ENUM type object outside the functions ---
# This allows us to reference it in both upgrade and downgrade.
position_history_type_enum = postgresql.ENUM(
    'DEPOSIT', 'WITHDRAWAL', 'TRANSFER_IN', 'TRANSFER_OUT', 'STAKE_TO_POOL', 'UNSTAKE_FROM_POOL',
    name='positionhistorytype'
)

def upgrade() -> None:
    """Upgrade schema."""
    # checkfirst=True prevents the "already exists" error on re-runs.
    # position_history_type_enum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('vaults_user_position_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('vault_id', sa.Uuid(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    # sa.Column('transaction_type', sa.Enum('DEPOSIT', 'WITHDRAWAL', 'TRANSFER_IN', 'TRANSFER_OUT', name='positionhistorytype'), nullable=False),
    sa.Column('transaction_type', position_history_type_enum, nullable=False),

    sa.Column('shares_amount', sa.Float(), nullable=False),
    sa.Column('share_price_at_transaction', sa.Float(), nullable=False),
    sa.Column('asset_amount', sa.Float(), nullable=False),
    sa.Column('counterparty_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['vault_id'], ['vaults.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vaults_user_position_history_counterparty_address'), 'vaults_user_position_history', ['counterparty_address'], unique=False)
    op.create_index(op.f('ix_vaults_user_position_history_timestamp'), 'vaults_user_position_history', ['timestamp'], unique=False)
    op.create_index(op.f('ix_vaults_user_position_history_transaction_hash'), 'vaults_user_position_history', ['transaction_hash'], unique=False)
    op.create_index(op.f('ix_vaults_user_position_history_user_address'), 'vaults_user_position_history', ['user_address'], unique=False)
    op.create_index(op.f('ix_vaults_user_position_history_vault_id'), 'vaults_user_position_history', ['vault_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_vaults_user_position_history_vault_id'), table_name='vaults_user_position_history')
    op.drop_index(op.f('ix_vaults_user_position_history_user_address'), table_name='vaults_user_position_history')
    op.drop_index(op.f('ix_vaults_user_position_history_transaction_hash'), table_name='vaults_user_position_history')
    op.drop_index(op.f('ix_vaults_user_position_history_timestamp'), table_name='vaults_user_position_history')
    op.drop_index(op.f('ix_vaults_user_position_history_counterparty_address'), table_name='vaults_user_position_history')
    op.drop_table('vaults_user_position_history')
    
    # This makes the downgrade function truly reversible.
    position_history_type_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
